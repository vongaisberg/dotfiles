# i3 config file (v4)
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!

set $mod Mod4

# Only used in mouse mode
set $mod2 Mod1 

focus_follows_mouse no


# MOUSE MODE

set $slow 20
set $quick 1
set $fast 500

mode "mouse" {

	# Mouse movement (slow/fine-tuned) -- vim keybindings

	bindsym h exec xdotool mousemove_relative -- -$slow 0
	bindsym j exec xdotool mousemove_relative 0 $slow
	bindsym k exec xdotool mousemove_relative -- 0 -$slow
	bindsym l exec xdotool mousemove_relative $slow 0

	# Mouse movement (slow/fine-tuned) -- arrow keys

	bindsym Left exec xdotool mousemove_relative -- -$slow 0
	bindsym Down exec xdotool mousemove_relative 0 $slow
	bindsym Up exec xdotool mousemove_relative -- 0 -$slow
	bindsym Right exec xdotool mousemove_relative $slow 0

	# Mouse movement (quicker) -- vim keybindings

	bindsym Shift+h exec xdotool mousemove_relative -- -$quick 0
	bindsym Shift+j exec xdotool mousemove_relative 0 $quick
	bindsym Shift+k exec xdotool mousemove_relative -- 0 -$quick
	bindsym Shift+l exec xdotool mousemove_relative $quick 0

	# Mouse movement (quicker) -- arrow keys

	bindsym Shift+Left exec xdotool mousemove_relative -- -$quick 0
	bindsym Shift+Down exec xdotool mousemove_relative 0 $quick
	bindsym Shift+Up exec xdotool mousemove_relative -- 0 -$quick
	bindsym Shift+Right exec xdotool mousemove_relative $quick 0

	# Mouse movement (fast) -- vim keybindings

	bindsym $mod2+h exec xdotool mousemove_relative -- -$fast 0
	bindsym $mod2+j exec xdotool mousemove_relative 0 $fast
	bindsym $mod2+k exec xdotool mousemove_relative -- 0 -$fast
	bindsym $mod2+l exec xdotool mousemove_relative $fast 0

	# Mouse movement (fast) -- arrow keys

	bindsym $mod2+Left exec xdotool mousemove_relative -- -$fast 0
	bindsym $mod2+Down exec xdotool mousemove_relative 0 $fast
	bindsym $mod2+Up exec xdotool mousemove_relative -- 0 -$fast
	bindsym $mod2+Right exec xdotool mousemove_relative $fast 0

	# Left Click
	bindsym f exec xdotool click 1

	# Middle Click
	bindsym d exec xdotool click 2

	# Right Click
	bindsym s exec xdotool click 3

	# Left Click-and-drag
	#bindsym Shift+f exec xdotool mousedown 1
	bindsym Shift+f mode "mouse-drag"; exec xdotool mousedown 1

	# Middle Click-and-drag 
	bindsym Shift+d exec xdotool mousedown 2

	# Right Click-and-drag
	bindsym Shift+s exec xdotool mousedown 3

	# Scroll up
	bindsym r exec xdotool click 4

	# Scroll down
	bindsym c exec xdotool click 5
	

	# return to normal keybindings -- IMPORTANT!!

	bindsym Escape mode "default"
	bindsym $Mod+m mode "default"
}

mode "mouse-drag" {

	# Mouse movement (slow/fine-tuned) -- vim keybindings

	bindsym h exec xdotool mousemove_relative -- -$slow 0
	bindsym j exec xdotool mousemove_relative 0 $slow
	bindsym k exec xdotool mousemove_relative -- 0 -$slow
	bindsym l exec xdotool mousemove_relative $slow 0

	# Mouse movement (slow/fine-tuned) -- arrow keys

	bindsym Left exec xdotool mousemove_relative -- -$slow 0
	bindsym Down exec xdotool mousemove_relative 0 $slow
	bindsym Up exec xdotool mousemove_relative -- 0 -$slow
	bindsym Right exec xdotool mousemove_relative $slow 0

	# Mouse movement (quicker) -- vim keybindings

	bindsym Shift+h exec xdotool mousemove_relative -- -$quick 0
	bindsym Shift+j exec xdotool mousemove_relative 0 $quick
	bindsym Shift+k exec xdotool mousemove_relative -- 0 -$quick
	bindsym Shift+l exec xdotool mousemove_relative $quick 0

	# Mouse movement (quicker) -- arrow keys

	bindsym Shift+Left exec xdotool mousemove_relative -- -$quick 0
	bindsym Shift+Down exec xdotool mousemove_relative 0 $quick
	bindsym Shift+Up exec xdotool mousemove_relative -- 0 -$quick
	bindsym Shift+Right exec xdotool mousemove_relative $quick 0

	# Mouse movement (fast) -- vim keybindings

	bindsym $mod2+h exec xdotool mousemove_relative -- -$fast 0
	bindsym $mod2+j exec xdotool mousemove_relative 0 $fast
	bindsym $mod2+k exec xdotool mousemove_relative -- 0 -$fast
	bindsym $mod2+l exec xdotool mousemove_relative $fast 0

	# Mouse movement (fast) -- arrow keys

	bindsym $mod2+Left exec xdotool mousemove_relative -- -$fast 0
	bindsym $mod2+Down exec xdotool mousemove_relative 0 $fast
	bindsym $mod2+Up exec xdotool mousemove_relative -- 0 -$fast
	bindsym $mod2+Right exec xdotool mousemove_relative $fast 0

	# Left Click
	bindsym f exec xdotool click 1

	# Middle Click
	bindsym d exec xdotool click 2

	# Right Click
	bindsym s exec xdotool click 3

	# Left Drag release
	bindsym Shift+f mode "mouse"; exec xdotool mouseup 1

	# Scroll up
	bindsym r exec xdotool click 4

	# Scroll down
	bindsym c exec xdotool click 5
	

	# return to normal keybindings -- IMPORTANT!!

	bindsym Escape mode "default"
	bindsym $Mod+m mode "default"
}
bindsym $mod+m mode "mouse"


# END OF MOUSE MODE

# Auto lock after timeout
exec xautolock -time 15 -locker '~/git/dotfiles/lock.sh' &

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:GoogleSans Nerd 8

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
bindsym $mod+Return exec i3-sensible-terminal
# start alacritty in same directory
bindsym $mod+Shift+Return exec alacritty --working-directory "$(readlink -e /proc/"$(pgrep -P "$(xdo pid)" | tail -n 1)"/cwd)"


# kill focused window
bindsym $mod+Shift+q kill

# start rofi (a program launcher)
bindsym $mod+d exec rofi -show run

# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+b split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

#SCRATCHPAD
bindsym $mod+Shift+minus move scratchpad
bindsym $mod+minus scratchpad show


# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
bindsym $mod+Shift+a focus child

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"

# switch to workspace
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8
bindsym $mod+9 workspace $ws9
bindsym $mod+0 workspace $ws10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8
bindsym $mod+Shift+9 move container to workspace $ws9
bindsym $mod+Shift+0 move container to workspace $ws10

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym h resize shrink width 10 px or 10 ppt
        bindsym j resize grow height 10 px or 10 ppt
        bindsym k resize shrink height 10 px or 10 ppt
        bindsym l resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}

bindsym $mod+r mode "resize"


# Set shut down, restart and locking features
bindsym $mod+x mode "$mode_system"
set $mode_system (l)ock, i3(e)xit, (s)uspend, (h)ibernate, (r)eboot, (Shift+s)hutdown
mode "$mode_system" {
    bindsym l exec --no-startup-id ~/git/dotfiles/lock.sh, mode "default"
    bindsym s exec --no-startup-id systemctl suspend, mode "default"
    #bindsym u exec --no-startup-id i3exit switch_user, mode "default"
    bindsym e exec --no-startup-id i3msg exit, mode "default"
    bindsym h exec --no-startup-id ~/git/dotfiles/lock.sh & systemctl hibernate, mode "default"
    bindsym r exec --no-startup-id reboot, mode "default"
    bindsym Shift+s exec --no-startup-id poweroff, mode "default"

    # exit system mode: "Enter" or "Escape"
    bindsym Return mode "default"
    bindsym Escape mode "default"
}


#######
#THEME#
#######

# set primary gruvbox colorscheme colors
set $bg #282828
set $red #cc241d
set $green #98971a
set $yellow #d79921
set $blue #458588
set $purple #b16286
set $aqua #689d68
set $gray #a89984
set $darkgray #1d2021

#COLORS
client.focused          $blue $blue $darkgray $purple $gray
client.focused_inactive $darkgray $darkgray $yellow $purple $darkgray
client.unfocused        $darkgray $darkgray $yellow $purple $darkgray
client.urgent           $red $red $white $red $red

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
	i3bar_command i3bar -t
	status_command i3blocks
	tray_output primary
	font pango:opensans, FontAwesome 7
	height 23
	set $transparent #2b2b2b4f
	
	position top
    colors {
        # bar background color
        background $bg
        # text color used for blocks that do not have a color specified.
        statusline $yellow
        # workspaces section            
        #                    border  backgr. text
        focused_workspace    $aqua $aqua $darkgray
        inactive_workspace   $darkgray $darkgray $yellow
        active_workspace     $darkgray $darkgray $yellow
        urgent_workspace     $red $red $bg
    }
}

#****
#CUSTOM
#****

# Pulse Audio controls
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume 0 +5% && pkill -RTMIN+10 i3blocks #increase sound volume
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume 0 -5% && pkill -RTMIN+10 i3blocks #decrease sound volume
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute 0 toggle && pkill -RTMIN+10 i3blocks # mute sound

# Sreen brightness controls
bindsym XF86MonBrightnessUp exec sudo /usr/bin/modify_brightness inc 375 # increase screen brightness
bindsym XF86MonBrightnessDown exec sudo /usr/bin/modify_brightness dec 375 # decrease screen brightness

# Media player controls
bindsym XF86AudioPlay exec playerctl play
bindsym XF86AudioPause exec playerctl pause
bindsym XF86AudioNext exec playerctl next
bindsym XF86AudioPrev exec playerctl previous

# Processor performance_energy_preference
bindsym $mod+KP_Add exec sudo /home/max/git/dotfiles/power_saving/power_settings.sh up > ~/.power_settings.log
bindsym $mod+KP_Subtract exec sudo /home/max/git/dotfiles/power_saving/power_settings.sh down

##########
###GAPS###
##########

# Disable window titlebars entirely
for_window [class="^.*"] border pixel 1

# Set inner/outer gaps
gaps inner 5
gaps outer 0

# Additionally, you can issue commands with the following syntax. This is useful to bind keys to changing the gap size.
# gaps inner|outer current|all set|plus|minus <px>
# gaps inner all set 10
# gaps outer all plus 5

# Smart gaps (gaps used if only more than one container on the workspace)
smart_gaps on

# Smart borders (draw borders around container only if it is not the only container on this workspace)
# on|no_gaps (on=always activate and no_gaps=only activate if the gap size to the edge of the screen is 0)
smart_borders on

# Press $mod+Shift+g to enter the gap mode. Choose o or i for modifying outer/inner gaps. Press one of + / - (in-/decrement for current workspace) or 0 (remove gaps for current workspace). If you also press Shift with these keys, the change will be global for all workspaces.
set $mode_gaps Gaps: (o) outer, (i) inner
set $mode_gaps_outer Outer Gaps: +|-|0 (local), Shift + +|-|0 (global)
set $mode_gaps_inner Inner Gaps: +|-|0 (local), Shift + +|-|0 (global)
bindsym $mod+Shift+g mode "$mode_gaps"

mode "$mode_gaps" {
        bindsym o      mode "$mode_gaps_outer"
        bindsym i      mode "$mode_gaps_inner"
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

mode "$mode_gaps_inner" {
        bindsym plus  gaps inner current plus 5
        bindsym minus gaps inner current minus 5
        bindsym 0     gaps inner current set 5

        bindsym Shift+plus  gaps inner all plus 5
        bindsym Shift+minus gaps inner all minus 5
        bindsym Shift+0     gaps inner all set 0

        bindsym Return mode "default"
        bindsym Escape mode "default"
}
mode "$mode_gaps_outer" {
        bindsym plus  gaps outer current plus 5
        bindsym minus gaps outer current minus 5
        bindsym 0     gaps outer current set 0

        bindsym Shift+plus  gaps outer all plus 5
        bindsym Shift+minus gaps outer all minus 5
        bindsym Shift+0     gaps outer all set 0

        bindsym Return mode "default"
        bindsym Escape mode "default"
}

set $mode_launch Launch: (q)utebrowser (c)hromium, (f)irefox, (n)eomutt, (s)potify, (z)athura, (u)nlock, (l)ock

bindsym $mod+g mode "$mode_launch"


# Quick Launch Shortcuts
mode "$mode_launch" {
	bindsym c exec chromium;mode "default"
	bindsym s exec spotify;mode "default"
	bindsym f exec firefox;mode "default"
	bindsym n exec ~/.config/i3/neomutt-startup.sh;mode "default"
	bindsym q exec qutebrowser;mode "default"
	bindsym z exec zathura;mode "default"
bindsym u exec alacritty -e /home/max/git/YouShallNotPassword/unlock.sh;mode "default"
bindsym l exec alacritty -e /home/max/git/YouShallNotPassword/cli -socket ~/git/YouShallNotPassword/socket -command "lock";mode "default"
bindsym Return mode "default"
	bindsym Escape mode "default"


}


# WORKSPACE ASSIGNMENTS FOR APPLICATIONS
for_window [class="Spotify"] move to workspace number $ws10



#Enable libinput-gestures
exec ~/git/libinput-gestures/libinput-gestures-setup start &




